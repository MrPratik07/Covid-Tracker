{"version":3,"sources":["InfoBox.js","ultil.js","Map.js","Table.js","Linegraph.js","App.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","center","zoom","countries","casesType","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","points","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","datas","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridlines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","Linegraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e81d0263.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./InfoBox.css\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nfunction InfoBox({ title, cases, active, isRed, total, ...props }) {\n  return (\n    <Card\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n      onClick={props.onClick}\n    >\n      <CardContent>\n        {/*Title i.e. ConornaViurs cases*/}\n        <Typography className=\"infoBox_title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n        {/*Cases i.e.  cases*/}\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n        {/*Total i.e. Total cases*/}\n        <Typography className=\"infoBox_total\" color=\"textSecondary\">\n          <p>{total} Total</p>\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#cc1034\",\n\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n\n    multiplier: 2000,\n  },\n};\nexport const sortData = (data) => {\n  const sortedData = [...data];\n  sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n  return sortedData;\n};\n//Draw circles on the map with interactive tooltip\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases:{numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered:{numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths:{numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"No Coronavirus Cases Detected\";\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./ultil\";\nfunction Map({ center, zoom, countries, casesType }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors'\n        ></TileLayer>\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases }) => (\n        <tr>\n          <td>{country}</td>\n          <td>\n            <strong>{numeral(cases).format(\"0.0a\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    points: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, datas) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridlines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\nconst buildChartData = (data, casesType = \"cases\") => {\n  const chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      const newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\nfunction Linegraph({ casesType, ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => response.json())\n        .then((data) => {\n          const chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                data: data,\n                backgroundColor: \"rgba(204,16,52,0.5)\",\n                borderColor: \"#CC1034\",\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Linegraph;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport \"./App.css\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData } from \"./ultil\";\nimport Linegraph from \"./Linegraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport { prettyPrintStat } from \"./ultil\";\nfunction App() {\n  //State to set all the countries as the menuItem\n  const [countries, setCountries] = useState([]);\n  //State to set default menuItem\n  const [country, setCountry] = useState(\"WorldWide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n  //STATE=How to write a variable in REACT <<<<<<<\n  //USEEFFECT= Run a piece of code\n  //Based on a given condition\n\n  useEffect(() => {\n    //async -> send a request a server,wait for it and do something with info\n    //The Code  inside here will run once\n    //when the component loads and not again\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, //United State, Japan ,China ,France\n            value: country.countryInfo.iso2, //UK,USA,CN,FR\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  //Stick the selected dropDown Item to the be the default Item\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    //\"https://disease.sh/v3/covid-19/all\n    //\"https://disease.sh/v3/covid-19/countries\"/[COUNTRY_CODE]\n\n    const url =\n      countryCode === \"WorldWide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        if (countryCode === \"WorldWide\") {\n          setMapCenter(mapCenter);\n          setZoom(mapZoom);\n        } else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setZoom(4);\n        }\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1> Covid 19 Tracker </h1>{\" \"}\n          <FormControl className=\"app_dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              {/*loop through all the countries and and show dropdown of the options */}\n              <MenuItem value=\"WorldWide\"> WorldWide </MenuItem>{\" \"}\n              {countries.map((country) => (\n                <MenuItem value={country.value}> {country.name} </MenuItem>\n              ))}{\" \"}\n              {/* <MenuItem value=\"worldwide\">worldwode</MenuItem>\n             <MenuItem value=\"worldwide\">worldwode</MenuItem>\n             <MenuItem value=\"worldwide\">worldwode</MenuItem>\n             <MenuItem value=\"worldwide\">worldwode</MenuItem> */}{\" \"}\n            </Select>\n          </FormControl>{\" \"}\n        </div>{\" \"}\n        {/*Title+Select input dropdown field */}{\" \"}\n        <div className=\"app_stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronaviurs Cases\"\n            total={prettyPrintStat(countryInfo.cases)}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n          />{\" \"}\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            total={prettyPrintStat(countryInfo.recovered)}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n          />{\" \"}\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            total={prettyPrintStat(countryInfo.deaths)}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n          />{\" \"}\n        </div>{\" \"}\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>{\" \"}\n      <Card className=\"app_right\">\n        <CardContent>\n          <h3 className=\"app_rightTableTitle\">Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app_rightGraphTitle\">WorldWide New {casesType}</h3>\n          <Linegraph className=\"app_graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}